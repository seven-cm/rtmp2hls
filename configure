#!/bin/bash

# 检查必要的编译工具
check_command() {
    if ! command -v $1 &> /dev/null; then
        echo "错误: 未找到命令 $1"
        exit 1
    fi
}

# 检查编译器和必要工具
check_command g++
check_command make
check_command cmake
check_command curl
check_command tar

# 创建必要的目录
mkdir -p objs
mkdir -p logs
mkdir -p html/live
mkdir -p 3rdparty

# 自动检测并处理APR、expat、iconv依赖
APR_DIR=3rdparty/apr-1.7.5
APR_UTIL_DIR=3rdparty/apr-util-1.6.3
APR_INSTALL=3rdparty/apr-install
EXPAT_VERSION=2.5.0
ICONV_VERSION=1.17

# 检查APR和APR-util静态库
if [ ! -f "$APR_INSTALL/lib/libapr-1.a" ] || [ ! -f "$APR_INSTALL/lib/libaprutil-1.a" ]; then
  echo "检测到APR库缺失，自动下载并编译APR和APR-util..."
  cd 3rdparty
  # 下载APR
  if [ ! -d "apr-1.7.5" ]; then
    curl -LO https://archive.apache.org/dist/apr/apr-1.7.5.tar.bz2
    tar -xjf apr-1.7.5.tar.bz2
    rm -f apr-1.7.5.tar.bz2
  fi
  # 下载APR-util
  if [ ! -d "apr-util-1.6.3" ]; then
    curl -LO https://archive.apache.org/dist/apr/apr-util-1.6.3.tar.bz2
    tar -xjf apr-util-1.6.3.tar.bz2
    rm -f apr-util-1.6.3.tar.bz2
  fi
  # 编译APR，增加macOS兼容参数和INODE64支持
  cd apr-1.7.5
  if [ ! -f "../apr-install/lib/libapr-1.a" ]; then
    CFLAGS=-fPIC ./configure --prefix="$(pwd)/../apr-install" --enable-static --disable-shared --enable-threads --enable-largefile CPPFLAGS="-D_DARWIN_USE_64_BIT_INODE=1"
    make -j$(sysctl -n hw.logicalcpu)
    make install
  fi
  cd ../apr-util-1.6.3
  if [ ! -f "../apr-install/lib/libaprutil-1.a" ]; then
    CFLAGS=-fPIC ./configure --prefix="$(pwd)/../apr-install" --with-apr="$(pwd)/../apr-install" --with-expat="$(pwd)/../apr-install" --with-iconv="$(pwd)/../apr-install"
    make -j$(sysctl -n hw.logicalcpu)
    make install
  fi
  cd ../../
fi

# 检查expat静态库
if [ ! -f "$APR_INSTALL/lib/libexpat.a" ]; then
  cd 3rdparty
  if [ ! -d "expat-$EXPAT_VERSION" ]; then
    curl -LO https://github.com/libexpat/libexpat/releases/download/R_${EXPAT_VERSION//./_}/expat-$EXPAT_VERSION.tar.gz
    tar -xzf expat-$EXPAT_VERSION.tar.gz
    rm -f expat-$EXPAT_VERSION.tar.gz
  fi
  cd expat-$EXPAT_VERSION
  ./configure --prefix="$(pwd)/../apr-install" --enable-static --disable-shared
  make -j$(sysctl -n hw.logicalcpu)
  make install
  cd ../../
fi

# 检查iconv静态库
if [ ! -f "$APR_INSTALL/lib/libiconv.a" ]; then
  cd 3rdparty
  if [ ! -d "libiconv-$ICONV_VERSION" ]; then
    curl -LO https://ftp.gnu.org/pub/gnu/libiconv/libiconv-$ICONV_VERSION.tar.gz
    tar -xzf libiconv-$ICONV_VERSION.tar.gz
    rm -f libiconv-$ICONV_VERSION.tar.gz
  fi
  cd libiconv-$ICONV_VERSION
  ./configure --prefix="$(pwd)/../apr-install" --enable-static --disable-shared
  make -j$(sysctl -n hw.logicalcpu)
  make install
  cd ../../
fi

# 下载并编译 log4cxx（使用 CMake）
cd 3rdparty
LOG4CXX_URL="https://downloads.apache.org/logging/log4cxx/1.3.1/apache-log4cxx-1.3.1.tar.gz"
LOG4CXX_TAR="apache-log4cxx-1.3.1.tar.gz"
LOG4CXX_DIR="apache-log4cxx-1.3.1"

# 检查是否已经存在
if [ -d "$LOG4CXX_DIR" ]; then
    echo "log4cxx 已经存在，跳过下载。"
else
    # 下载
    echo "正在下载 log4cxx..."
    curl -LO "$LOG4CXX_URL"

    # 检查下载是否成功
    if [ $? -ne 0 ]; then
        echo "下载 log4cxx 失败，请检查网络连接。"
        exit 1
    fi

    # 解压
    echo "正在解压 log4cxx..."
    tar -xzf "$LOG4CXX_TAR"
fi

cd $LOG4CXX_DIR
if [ ! -f ../log4cxx-install/lib/liblog4cxx.a ]; then
  mkdir -p build/log4cxx && cd build/log4cxx
  cmake -S ../../../$LOG4CXX_DIR -B . -DAPR_STATIC=yes -DAPU_STATIC=yes -DCMAKE_PREFIX_PATH=$(pwd)/../../apr-install -DCMAKE_INSTALL_PREFIX=$(pwd)/../../../log4cxx-install -DCMAKE_BUILD_TYPE=Release
  cmake --build . --target install
  cd ..
fi
cd ../../

# 生成Makefile
cat > Makefile << 'EOF'
# 指定C++编译器
XX = g++

# 编译选项：生成目标文件、调试信息、C++11标准
CXXFLAGS = -c -g -std=c++11

# 链接库：线程库、log4cxx、APR、APR-util、expat、iconv
CLIBS = -lpthread -L./3rdparty/log4cxx-install/lib -llog4cxx -L./3rdparty/apr-install/lib -lapr-1 -laprutil-1 -lexpat -liconv -Wl,-rpath,./3rdparty/log4cxx-install/lib -Wl,-rpath,./3rdparty/apr-install/lib

# 包含头文件目录
INCLUDE_DIRS = -I./src -I./3rdparty/log4cxx-install/include -I./3rdparty/apr-install/include

# 源文件目录
SRCDIR = src

# 目标文件目录
OBJDIR = objs

# 获取所有cpp源文件（包括子目录）
SRC = $(shell find $(SRCDIR) -name '*.cpp')

# 将cpp文件名转换为对应的.o文件名
OBJECTS := $(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(SRC))

# 定义程序名称
PROGRAM := rtmp2hls
TARGET = $(PROGRAM)

# 默认目标：编译程序
all: $(TARGET)

# 链接目标文件生成可执行文件
$(TARGET): $(OBJECTS)
	$(XX) -static-libstdc++ -o $@ $^ $(CLIBS)

# 编译规则：将cpp文件编译为对象文件
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	mkdir -p $(dir $@)
	$(XX) $(CXXFLAGS) $< -o $@ $(INCLUDE_DIRS)

# 清理目标：删除生成的目标文件和可执行文件
.PHONY: clean
clean:
	rm -rf $(OBJDIR)/*.o $(TARGET)

# 安装目标（已注释）
#.PHONY: install
#install:
#	install -m 755 $(TARGET) /usr/local/bin/
EOF

echo "配置完成。现在可以运行 make 来编译项目。"